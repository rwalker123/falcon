syntax = "proto3";

package shadow_scale.commands;

option optimize_for = SPEED;

// NOTE: *_UNSPECIFIED entries are reserved and will be rejected by the runtime
// decode helpers. Clients must populate concrete values before sending envelopes.
enum SupportChannel {
  SUPPORT_CHANNEL_UNSPECIFIED = 0;
  SUPPORT_CHANNEL_POPULAR = 1;
  SUPPORT_CHANNEL_PEER = 2;
  SUPPORT_CHANNEL_INSTITUTIONAL = 3;
  SUPPORT_CHANNEL_HUMANITARIAN = 4;
}

enum InfluenceScopeKind {
  INFLUENCE_SCOPE_KIND_UNSPECIFIED = 0;
  INFLUENCE_SCOPE_KIND_LOCAL = 1;
  INFLUENCE_SCOPE_KIND_REGIONAL = 2;
  INFLUENCE_SCOPE_KIND_GLOBAL = 3;
  INFLUENCE_SCOPE_KIND_GENERATION = 4;
}

enum CorruptionSubsystem {
  CORRUPTION_SUBSYSTEM_UNSPECIFIED = 0;
  CORRUPTION_SUBSYSTEM_LOGISTICS = 1;
  CORRUPTION_SUBSYSTEM_TRADE = 2;
  CORRUPTION_SUBSYSTEM_MILITARY = 3;
  CORRUPTION_SUBSYSTEM_GOVERNANCE = 4;
}

enum OrdersDirective {
  ORDERS_DIRECTIVE_UNSPECIFIED = 0;
  ORDERS_DIRECTIVE_READY = 1;
}

message TurnCommand {
  uint32 steps = 1;
}

message ResetMapCommand {
  uint32 width = 1;
  uint32 height = 2;
}

message HeatCommand {
  uint64 entity_bits = 1;
  sint64 delta = 2;
}

message OrdersCommand {
  uint32 faction_id = 1;
  OrdersDirective directive = 2;
}

message RollbackCommand {
  uint64 tick = 1;
}

message AxisBiasCommand {
  uint32 axis = 1;
  float value = 2;
}

message SupportInfluencerCommand {
  uint32 id = 1;
  float magnitude = 2;
}

message SuppressInfluencerCommand {
  uint32 id = 1;
  float magnitude = 2;
}

message SupportInfluencerChannelCommand {
  uint32 id = 1;
  SupportChannel channel = 2;
  float magnitude = 3;
}

message SpawnInfluencerCommand {
  optional InfluenceScopeKind scope = 1;
  optional uint32 generation = 2;
}

message InjectCorruptionCommand {
  CorruptionSubsystem subsystem = 1;
  float intensity = 2;
  uint32 exposure_timer = 3;
}

message EspionageGeneratorUpdate {
  string template_id = 1;
  optional bool enabled = 2;
  optional uint32 per_faction = 3;
}

message UpdateEspionageGeneratorsCommand {
  repeated EspionageGeneratorUpdate updates = 1;
}

message QueueEspionageMissionCommand {
  string mission_id = 1;
  uint32 owner_faction = 2;
  uint32 target_owner_faction = 3;
  uint32 discovery_id = 4;
  uint32 agent_handle = 5;
  optional uint32 target_tier = 6;
  optional uint64 scheduled_tick = 7;
}

message UpdateEspionageQueueDefaultsCommand {
  optional uint32 scheduled_tick_offset = 1;
  optional uint32 target_tier = 2;
}

enum SecurityPolicyKind {
  SECURITY_POLICY_KIND_UNSPECIFIED = 0;
  SECURITY_POLICY_KIND_LENIENT = 1;
  SECURITY_POLICY_KIND_STANDARD = 2;
  SECURITY_POLICY_KIND_HARDENED = 3;
  SECURITY_POLICY_KIND_CRISIS = 4;
}

message UpdateCounterIntelPolicyCommand {
  uint32 faction = 1;
  SecurityPolicyKind policy = 2;
}

message AdjustCounterIntelBudgetCommand {
  uint32 faction = 1;
  optional float reserve = 2;
  optional float delta = 3;
}

enum ReloadConfigKind {
  RELOAD_CONFIG_KIND_UNSPECIFIED = 0;
  RELOAD_CONFIG_KIND_SIMULATION = 1;
  RELOAD_CONFIG_KIND_TURN_PIPELINE = 2;
  RELOAD_CONFIG_KIND_SNAPSHOT_OVERLAYS = 3;
  RELOAD_CONFIG_KIND_CRISIS_ARCHETYPES = 4;
  RELOAD_CONFIG_KIND_CRISIS_MODIFIERS = 5;
  RELOAD_CONFIG_KIND_CRISIS_TELEMETRY = 6;
}

message ReloadConfigCommand {
  ReloadConfigKind kind = 1;
  optional string path = 2;
}

message SetCrisisAutoSeedCommand {
  bool enabled = 1;
}

message SpawnCrisisCommand {
  uint32 faction = 1;
  string archetype_id = 2;
}

message CommandEnvelope {
  optional uint64 correlation_id = 15;

  oneof command {
    TurnCommand turn = 1;
    ResetMapCommand reset_map = 11;
    HeatCommand heat = 2;
    OrdersCommand orders = 3;
    RollbackCommand rollback = 4;
    AxisBiasCommand axis_bias = 5;
    SupportInfluencerCommand support_influencer = 6;
    SuppressInfluencerCommand suppress_influencer = 7;
    SupportInfluencerChannelCommand support_channel = 8;
    SpawnInfluencerCommand spawn_influencer = 9;
    InjectCorruptionCommand inject_corruption = 10;
    UpdateEspionageGeneratorsCommand update_espionage_generators = 12;
    QueueEspionageMissionCommand queue_espionage_mission = 13;
    UpdateEspionageQueueDefaultsCommand update_espionage_queue_defaults = 14;
    UpdateCounterIntelPolicyCommand update_counter_intel_policy = 17;
    AdjustCounterIntelBudgetCommand adjust_counter_intel_budget = 18;
    ReloadConfigCommand reload_config = 16;
    SetCrisisAutoSeedCommand set_crisis_auto_seed = 19;
    SpawnCrisisCommand spawn_crisis = 20;
  }
}
